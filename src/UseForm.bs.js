// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_chrome_debugger from "bs-platform/lib/es6/caml_chrome_debugger.js";

var initialFormData = {
  username: "",
  email: "",
  password: ""
};

var registerFormRules = [
  {
    id: 0,
    field: "username",
    message: "Username must have at least 5 characters.",
    valid: false
  },
  {
    id: 1,
    field: "email",
    message: "Email must have at least 5 characters.",
    valid: false
  },
  {
    id: 2,
    field: "email",
    message: "Email must be a valid email address.",
    valid: false
  },
  {
    id: 3,
    field: "password",
    message: "Password must have at least 10 characters.",
    valid: false
  }
];

var loginFormRules = [
  {
    id: 0,
    field: "email",
    message: "Email is required.",
    valid: false
  },
  {
    id: 1,
    field: "email",
    message: "Email must be a valid email address.",
    valid: false
  },
  {
    id: 2,
    field: "password",
    message: "Password is required.",
    valid: false
  }
];

function validEmail(email) {
  var re = /^(([^<>()\[\]\.,;:\s@']+(\.[^<>()\[\]\.,;:\s@']+)*)|('.+'))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
}

function areAllRulesValid(formRules) {
  return Belt_Array.every(formRules, (function (rule) {
                return rule.valid;
              }));
}

function setRuleToValid(rules, id) {
  return $$Array.map((function (rule) {
                if (rule.id === id) {
                  return {
                          id: rule.id,
                          field: rule.field,
                          message: rule.message,
                          valid: true
                        };
                } else {
                  return rule;
                }
              }), rules);
}

function setRuleToInvalid(rules, id) {
  return $$Array.map((function (rule) {
                if (rule.id === id) {
                  return {
                          id: rule.id,
                          field: rule.field,
                          message: rule.message,
                          valid: false
                        };
                } else {
                  return rule;
                }
              }), rules);
}

function registerFormRulesReducer(state, action) {
  switch (action.tag | 0) {
    case /* UsernameLongEnough */0 :
        if (action[0].length >= 5) {
          return setRuleToValid(state, 0);
        } else {
          return setRuleToInvalid(state, 0);
        }
    case /* EmailLongEnough */1 :
        if (action[0].length >= 5) {
          return setRuleToValid(state, 1);
        } else {
          return setRuleToInvalid(state, 1);
        }
    case /* EmailForRegistrationValid */2 :
        if (validEmail(action[0])) {
          return setRuleToValid(state, 2);
        } else {
          return setRuleToInvalid(state, 2);
        }
    case /* PasswordLongEnough */3 :
        if (action[0].length >= 10) {
          return setRuleToValid(state, 3);
        } else {
          return setRuleToInvalid(state, 3);
        }
    
  }
}

function loginFormRulesReducer(state, action) {
  switch (action.tag | 0) {
    case /* EmailRequired */0 :
        if (action[0].length !== 0) {
          return setRuleToValid(state, 0);
        } else {
          return setRuleToInvalid(state, 0);
        }
    case /* EmailForLoginValid */1 :
        if (validEmail(action[0])) {
          return setRuleToValid(state, 1);
        } else {
          return setRuleToInvalid(state, 1);
        }
    case /* PasswordRequired */2 :
        if (action[0].length !== 0) {
          return setRuleToValid(state, 2);
        } else {
          return setRuleToInvalid(state, 2);
        }
    
  }
}

function formReducer(state, action) {
  if (typeof action === "number") {
    return initialFormData;
  } else {
    switch (action.tag | 0) {
      case /* SetUsername */0 :
          return {
                  username: action[0],
                  email: state.email,
                  password: state.password
                };
      case /* SetEmail */1 :
          return {
                  username: state.username,
                  email: action[0],
                  password: state.password
                };
      case /* SetPassword */2 :
          return {
                  username: state.username,
                  email: state.email,
                  password: action[0]
                };
      
    }
  }
}

function useForm(formType, callback) {
  var match = React.useState((function () {
          return false;
        }));
  var setAllValid = match[1];
  var allValid = match[0];
  var match$1 = React.useReducer(formReducer, initialFormData);
  var dispatchFormData = match$1[1];
  var formData = match$1[0];
  var match$2 = React.useReducer(registerFormRulesReducer, registerFormRules);
  var dispatchRegisterFormRules = match$2[1];
  var match$3 = React.useReducer(loginFormRulesReducer, loginFormRules);
  var dispatchLoginFormRules = match$3[1];
  var formRules;
  switch (formType) {
    case "login" :
        formRules = match$3[0];
        break;
    case "register" :
        formRules = match$2[0];
        break;
    default:
      formRules = [];
  }
  var validate = function (formDataOpt, param) {
    var formData$1 = formDataOpt !== undefined ? formDataOpt : formData;
    switch (formType) {
      case "login" :
          Curry._1(dispatchLoginFormRules, /* EmailRequired */Caml_chrome_debugger.variant("EmailRequired", 0, [formData$1.email]));
          Curry._1(dispatchLoginFormRules, /* EmailForLoginValid */Caml_chrome_debugger.variant("EmailForLoginValid", 1, [formData$1.email]));
          return Curry._1(dispatchLoginFormRules, /* PasswordRequired */Caml_chrome_debugger.variant("PasswordRequired", 2, [formData$1.password]));
      case "register" :
          Curry._1(dispatchRegisterFormRules, /* UsernameLongEnough */Caml_chrome_debugger.variant("UsernameLongEnough", 0, [formData$1.username]));
          Curry._1(dispatchRegisterFormRules, /* EmailLongEnough */Caml_chrome_debugger.variant("EmailLongEnough", 1, [formData$1.email]));
          Curry._1(dispatchRegisterFormRules, /* EmailForRegistrationValid */Caml_chrome_debugger.variant("EmailForRegistrationValid", 2, [formData$1.email]));
          return Curry._1(dispatchRegisterFormRules, /* PasswordLongEnough */Caml_chrome_debugger.variant("PasswordLongEnough", 3, [formData$1.password]));
      default:
        return /* () */0;
    }
  };
  var handleChange = function (evt) {
    evt.persist();
    var match = evt.target.name;
    switch (match) {
      case "email" :
          return Curry._1(dispatchFormData, /* SetEmail */Caml_chrome_debugger.variant("SetEmail", 1, [evt.target.value]));
      case "password" :
          return Curry._1(dispatchFormData, /* SetPassword */Caml_chrome_debugger.variant("SetPassword", 2, [evt.target.value]));
      case "username" :
          return Curry._1(dispatchFormData, /* SetUsername */Caml_chrome_debugger.variant("SetUsername", 0, [evt.target.value]));
      default:
        return /* () */0;
    }
  };
  var handleSubmit = function (evt) {
    evt.preventDefault();
    return Curry._1(setAllValid, (function (param) {
                  return Belt_Array.every(formRules, (function (rule) {
                                return rule.valid;
                              }));
                }));
  };
  React.useEffect((function () {
          validate(formData, /* () */0);
          return ;
        }), [formData]);
  React.useEffect((function () {
          if (allValid) {
            Curry._1(callback, /* () */0);
            Curry._1(dispatchFormData, /* ResetState */0);
            return ;
          }
          
        }), [allValid]);
  return /* tuple */[
          formData,
          formRules,
          handleChange,
          handleSubmit
        ];
}

export {
  initialFormData ,
  registerFormRules ,
  loginFormRules ,
  validEmail ,
  areAllRulesValid ,
  setRuleToValid ,
  setRuleToInvalid ,
  registerFormRulesReducer ,
  loginFormRulesReducer ,
  formReducer ,
  useForm ,
  
}
/* react Not a pure module */
